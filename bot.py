import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import CancelHandler
from database import get_db, SessionLocal
from models import Ticket, User, Reply
import os
from dotenv import load_dotenv
from datetime import datetime
from sqlalchemy.orm import Session

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class DatabaseMiddleware(BaseMiddleware):
    def __init__(self):
        super().__init__()
        self.db = None

    async def on_pre_process_message(self, message: types.Message, data: dict):
        self.db = next(get_db())
        data['db'] = self.db

    async def on_post_process_message(self, message: types.Message, data_list: list, *args):
        if self.db:
            self.db.close()
            self.db = None

dp.middleware.setup(DatabaseMiddleware())

async def get_or_create_user(message: types.Message, db: Session) -> User:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.telegram_id == str(message.from_user.id)).first()
    if not user:
        username = message.from_user.username or f"user_{message.from_user.id}"
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        
        user = User(
            username=username,
            telegram_id=str(message.from_user.id),
            first_name=first_name,
            last_name=last_name,
            is_blocked=False
        )
        db.add(user)
        db.commit()
    return user

async def get_or_create_ticket(user: User, db: Session) -> Ticket:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π"""
    ticket = db.query(Ticket).filter(
        Ticket.user_id == user.id,
        Ticket.is_blocked == False
    ).first()
    
    if not ticket:
        ticket = Ticket(
            title=f"–ß–∞—Ç —Å {user.username or user.telegram_id}",
            description=f"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.first_name or ''} {user.last_name or ''}",
            status="–ê–∫—Ç–∏–≤–µ–Ω",
            user_id=user.id,
            unread_count=0,
            is_blocked=False
        )
        db.add(ticket)
        db.commit()
    
    return ticket

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    db = SessionLocal()
    try:
        user = await get_or_create_user(message, db)
        if user.is_blocked:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
            return
            
        await get_or_create_ticket(user, db)
        await message.reply(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    db = SessionLocal()
    try:
        user = await get_or_create_user(message, db)
        if user.is_blocked:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
            return
            
        ticket = await get_or_create_ticket(user, db)
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file_id = photo.file_id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ç–æ
        reply = Reply(
            ticket_id=ticket.id,
            user_id=user.username or f"user_{user.telegram_id}",
            message=message.caption,  # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            photo_file_id=file_id,
            is_read=False
        )
        db.add(reply)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        ticket.unread_count = ticket.unread_count + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        ticket.updated_at = datetime.utcnow()
        db.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

@dp.message_handler()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    db = SessionLocal()
    try:
        user = await get_or_create_user(message, db)
        if user.is_blocked:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
            return
            
        ticket = await get_or_create_ticket(user, db)
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        reply = Reply(
            ticket_id=ticket.id,
            user_id=user.username or f"user_{user.telegram_id}",
            message=message.text,
            is_read=False
        )
        db.add(reply)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        ticket.unread_count = ticket.unread_count + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        ticket.updated_at = datetime.utcnow()
        db.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

async def main():
    await dp.start_polling() 